{{define "base"}}
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Booking App</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
  <!-- Datepicker CSS (compatible with Bootstrap v5) -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/css/datepicker-bs5.min.css">
  <!-- Custom alerts CSS -->
  <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
  <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
</head>

<body>
  <!-- Navigation Menu -->
  <nav class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Navbar</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/about">About</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Rooms
            </a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
              <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/search-availability">Book Now</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/contact">Contact</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  {{block "content" .}}

  {{end}}

  <!-- Footer -->
  <div class="container-fluid">
    <div class="row my-footer">
      <div class="col">
        Left
      </div>
      <div class="col">
        Middle
      </div>
      <div class="col">
        Right
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
    crossorigin="anonymous"></script>
  <!-- Datepicker JS -->
  <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/js/datepicker-full.min.js"></script>
  <!-- Custom alerts JS -->
  <script src="https://unpkg.com/notie"></script>
  <!-- Custom modal SweetAlert JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  {{block "js" .}}
    
  {{end}}

  <script>
    let attention = Prompt();

    (function () {
      'use strict';
      window.addEventListener('load', function () {
        // fetch all forms to apply custom validation styles.
        let forms = document.getElementsByClassName('needs-validation');
        // loop over them and prevent submissions.
        Array.prototype.filter.call(forms, function (form) {
          form.addEventListener('submit', function (event) {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add('was-validated');
          }, false);
        });
      }, false);
    })();

    
    // Custom alerts:
    function notify(msg, msgType) {
      notie.alert({
        type: msgType,
        text: msg,
      })
    };

    function notifyModal(title, text, icon, confirmBtn) {
      Swal.fire({
        title: title,
        html: text,
        // text: text,
        icon: icon,
        confirmButtonText: confirmBtn
      })
    }

    // Custom toasts:
    // JS module technique:
    function Prompt() {

      let toast = function (c) {
        const { // default values
          msg = "",
          icon = "success",
          position = "top-end",
        } = c;

        const Toast = Swal.mixin({
          toast: true,
          title: msg,
          icon: icon,
          position: position,
          showConfirmButton: false,
          timer: 3000,
          timerProgressbar: true,
          didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
          }
        });

        Toast.fire({});
      }

      let success = function (c) {
        const {
          msg = "",
          title = "",
          footer = "",
        } = c;

        Swal.fire({
          icon: 'success',
          title: title,
          text: msg,
          footer: footer,
        })
      }

      let error = function (c) {
        const {
          msg = "",
          title = "",
          footer = "",
        } = c;

        Swal.fire({
          icon: 'error',
          title: title,
          text: msg,
          footer: footer,
        })
      }

      async function custom(c) {
        const {
          msg = "",
          title = "",
        } = c;

        const { value: result } = await Swal.fire({
          title: title,
          html: msg,
          backdrop: false,
          focusConfirm: false,
          showCancelButton: true,
          willOpen: () => {
            if (c.willOpen !== undefined) {
              c.willOpen();
            }
          },
          preConfirm: () => {
            if (c.preConfirm !== undefined) {
              return c.preConfirm();
            }
          },
          didOpen: () => {
            if (c.didOpen !== undefined) {
              c.didOpen();
            }
          }
        });

        if (result) {
          if (result.dismiss !== Swal.DismissReason.cancel) {
            if (result.value !== "") {
              if (c.callback !== undefined) {
                c.callback(result);
              }
            } else {
              c.callback(false);
            }
          } else {
            c.callback(false);
          }
        }
      }

      return {
        toast: toast,
        success: success,
        error: error,
        custom, custom,
      }
    }
  </script>
</body>

</html>
{{end}}